pipeline {
    agent any

    environment {
        VENV_DIR = 'venv' // Virtual environment directory
    }

    stages {
        stage('Clone Repository') {
            steps {
                git branch: 'main',
                    credentialsId: 'github-credentials',
                    url: 'https://github.com/linda mutheu/messaging_app.git'
            }
        }

        stage('Set Up Python Environment') {
            steps {
                sh '''
                    # Install Python and pip3 if not installed
                    which python3 || sudo apt update && sudo apt install -y python3 python3-venv python3-pip

                    # Create virtual environment
                    python3 -m venv ${VENV_DIR}

                    # Activate virtual environment
                    . ${VENV_DIR}/bin/activate

                    # Upgrade pip3 and install dependencies
                    pip3 install --upgrade pip
                    pip3 install -r messaging_app/requirements.txt pytest pytest-html
                '''
            }
        }

        stage('Run Tests') {
            steps {
                sh '''
                    . ${VENV_DIR}/bin/activate
                    pytest messaging_app/tests --html=pytest_report.html --self-contained-html
                '''
            }
        }

        stage('Publish Test Report') {
            steps {
                publishHTML([
                    allowMissing: false,
                    alwaysLinkToLastBuild: true,
                    keepAll: true,
                    reportDir: '.',
                    reportFiles: 'pytest_report.html',
                    reportName: 'Pytest HTML Report'
                ])
            }
        }



        stage('Build Docker Image') {
            steps {
                sh '''
                    echo "Building Docker image ${DOCKER_IMAGE}"
                    docker build -t ${DOCKER_IMAGE} messaging_app
                '''
            }
        }

        stage('Push Docker Image to Docker Hub') {
            steps {
                withCredentials([usernamePassword(credentialsId: "${DOCKERHUB_CREDENTIALS}", usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                    sh '''
                        echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
                        docker push ${DOCKER_IMAGE}
                        docker logout
                    '''
                }
            }
        }
    }





    }

    post {
        always {
            echo "Pipeline finished."
        }
        success {
            echo "✅ Tests passed and report generated."
        }
        failure {
            echo "❌ Tests failed! Check the report for details."
        }
    }
}
